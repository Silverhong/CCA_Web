{"version":3,"sources":["Service.js","screens/user/UpdateUser.js"],"names":["serviceAPI","UpdateUser","props","submitHandler","e","preventDefault","userObject","state","password","undefined","username","email","role_id","role","description","console","log","axios","put","ServiceApi","id","then","window","location","href","origin","handleChange","changeObject","setState","userId","localStorage","getItem","match","params","users","rolesOption","roleSelected","get","response","data","catch","error","this","map","item","className","placeholder","name","value","onChange","target","to","type","onClick","React","Component"],"mappings":"6KAEeA,IAFC,uB,4ICiBVC,E,kDAEF,WAAYC,GAAO,IAAD,uBACd,cAAMA,IAeVC,cAAgB,SAACC,GACbA,EAAEC,iBACF,IAAIC,EAAa,GAEbA,EADsB,IAAvB,EAAKC,MAAMC,eAAyCC,GAAvB,EAAKF,MAAMC,SAC1B,CACTE,SAAU,EAAKH,MAAMG,SACrBC,MAAO,EAAKJ,MAAMI,MAClBC,QAAS,EAAKL,MAAMM,KACpBC,YAAa,EAAKP,MAAMO,aAGf,CACTJ,SAAU,EAAKH,MAAMG,SACrBC,MAAO,EAAKJ,MAAMI,MAClBH,SAAU,EAAKD,MAAMC,SACrBI,QAAS,EAAKL,MAAMM,KACpBC,YAAa,EAAKP,MAAMO,aAIhCC,QAAQC,IAAIV,GACZW,IAAMC,IAAI,UAAGC,KAAH,uBAAgC,EAAKZ,MAAMa,IAAOd,GACzDe,MAAK,WACJC,OAAOC,SAASC,KAAhB,UAAwBF,OAAOG,OAA/B,eAvCU,EA2ClBC,aAAgB,SAACC,GACb,EAAKC,SAASD,IA1Cd,IAAME,EAASC,aAAaC,QAAQ,QAFtB,MAGD,IAAVF,QAA0BpB,GAAVoB,IAAqBP,OAAOC,SAASC,KAAhB,UAAyBF,OAAOG,OAAhC,aACxC,EAAKlB,MAAQ,CACTa,GAAI,EAAKlB,MAAM8B,MAAMC,OAAOb,GAC5Bc,MAAO,GACPC,YAAa,GACbzB,SAAU,GACVC,MAAO,GACPH,SAAU,GACV4B,aAAc,GACdtB,YAAa,IAZH,E,gEA+CE,IAAD,OAEfG,IAAMoB,IAAI,UAAGlB,KAAH,gBACPE,MAAK,SAACiB,GACL,EAAKV,SAAS,CAAEO,YAAaG,EAASC,KAAKA,UAE5CC,OAAM,SAAUC,GACf1B,QAAQC,IAAIyB,MAIdxB,IAAMoB,IAAI,UAAGlB,KAAH,uBAAgCuB,KAAKnC,MAAMa,KACpDC,MAAK,SAACiB,GACH,EAAKV,SAAS,CAAEM,MAAOI,EAASC,KAAKA,OACvC,EAAKhC,MAAM2B,MAAMS,KAAK,SAAAC,GAClB,EAAKhB,SAAS,CACVlB,SAAUkC,EAAKlC,SACfC,MAAOiC,EAAKjC,MACZyB,aAAcQ,EAAKhC,QACnBE,YAAa8B,EAAK9B,oBAI3B0B,OAAM,SAAUC,GACf1B,QAAQC,IAAIyB,Q,+BAIX,IAAD,OACJ,OACI,cAAC,IAAD,UACI,cAAC,IAAD,UACK,eAAC,IAAD,WACA,cAAC,IAAD,UACI,cAAC,IAAD,CAAMI,UAAU,cAAhB,SACI,eAAC,IAAD,WACD,eAAC,IAAD,uBAAiB,sBAAMA,UAAU,cAAhB,kBAChB,cAAC,IAAD,CACAA,UAAU,eACVC,YAAY,iBACZC,KAAK,WACLC,MAASN,KAAKnC,MAAMG,SACpBuC,SAAU,SAAC7C,GAAD,OAAO,EAAKsB,aAAa,CAAEhB,SAAUN,EAAE8C,OAAOF,kBAKhE,cAAC,IAAD,UACI,cAAC,IAAD,CAAMH,UAAU,cAAhB,SACI,eAAC,IAAD,WACA,cAAC,IAAD,oBACA,cAAC,IAAD,CACAA,UAAU,eACVE,KAAK,QACLD,YAAY,cACZE,MAASN,KAAKnC,MAAMI,MACpBsC,SAAU,SAAC7C,GAAD,OAAO,EAAKsB,aAAa,CAAEf,MAAOP,EAAE8C,OAAOF,kBAK7D,cAAC,IAAD,UACI,cAAC,IAAD,CAAMH,UAAU,cAAhB,SACI,eAAC,IAAD,WACA,eAAC,IAAD,uBAAiB,sBAAMA,UAAU,cAAhB,kBACjB,cAAC,IAAD,CACAA,UAAU,eACVC,YAAY,iBACZC,KAAK,WACLC,MAASN,KAAKnC,MAAMC,SACpByC,SAAU,SAAC7C,GAAD,OAAO,EAAKsB,aAAa,CAAElB,SAAUJ,EAAE8C,OAAOF,kBAoBhE,cAAC,IAAD,UACI,cAAC,IAAD,CAAMH,UAAU,cAAhB,SACI,eAAC,IAAD,WACA,cAAC,IAAD,0BACI,cAAC,KAAD,CAAWC,YAAY,oBACtBC,KAAK,cACLC,MAASN,KAAKnC,MAAMO,YACpBmC,SAAU,SAAC7C,GAAD,OAAO,EAAKsB,aAAa,CAAEZ,YAAaV,EAAE8C,OAAOF,kBAKxE,cAAC,IAAD,UACI,cAAC,IAAD,CAAMH,UAAU,cAAhB,SACI,eAAC,IAAD,WACG,cAAC,IAAD,CAASM,GAAG,QAAQN,UAAU,cAA9B,oBACA,cAAC,IAAD,CAASO,KAAK,SAASC,QAAWX,KAAKvC,cAAgB0C,UAAU,cAAjE,2C,GA3JPS,IAAMC,WAsKhBtD","file":"static/js/19.a55bd711.chunk.js","sourcesContent":["const serviceAPI = `http://localhost:81`;\n\nexport default serviceAPI","import React from 'react';\nimport axios from 'axios';\nimport ServiceApi from \"../../Service\";\nimport {\n    CCard,\n    CCardBody,\n    CRow,\n    CCol,\n    CInput,\n    CFormGroup,\n    CForm,\n    CButton,\n    CSelect,\n    CTextarea,\n    CLabel\n  } from '@coreui/react';\n\nclass UpdateUser extends React.Component {\n\n    constructor(props){\n        super(props);\n        const userId = localStorage.getItem('uuid');\n        if(userId == '' || userId == undefined) window.location.href =`${window.origin}/#/login`;\n        this.state = {\n            id: this.props.match.params.id,\n            users: [],\n            rolesOption: [],\n            username: '',\n            email: '',\n            password: '',\n            roleSelected: '',\n            description: ''\n        }\n    }\n\n    submitHandler = (e) => {\n        e.preventDefault();\n        let userObject = [];\n        if(this.state.password == '' || this.state.password == undefined ){\n            userObject = {\n                username: this.state.username,\n                email: this.state.email,\n                role_id: this.state.role,\n                description: this.state.description\n            }\n        }else{\n            userObject = {\n                username: this.state.username,\n                email: this.state.email,\n                password: this.state.password,\n                role_id: this.state.role,\n                description: this.state.description\n            }\n        }\n\n        console.log(userObject);\n        axios.put(`${ServiceApi}`+`/api/v1/user/${this.state.id }`, userObject )\n          .then(function () {\n            window.location.href=`${window.origin}/#/user`;\n          })\n    }\n    \n    handleChange  = (changeObject) => {\n        this.setState(changeObject);\n    }\n\n    componentDidMount(){\n        ////// Get roles\n        axios.get(`${ServiceApi}`+`/api/v1/role`)\n          .then((response) => {\n            this.setState({ rolesOption: response.data.data });\n          })\n          .catch(function (error) {\n            console.log(error);\n          }) \n\n          ////// Get User one\n          axios.get(`${ServiceApi}`+`/api/v1/user/${this.state.id}`)\n          .then((response) => {\n              this.setState({ users: response.data.data });\n            this.state.users.map( item => {\n                this.setState({\n                    username: item.username,\n                    email: item.email,\n                    roleSelected: item.role_id,\n                    description: item.description\n                });\n            });\n          })\n          .catch(function (error) {\n            console.log(error);\n          }) \n    }\n\n    render(){\n        return(\n            <CCard>\n                <CCardBody>\n                     <CForm>\n                     <CRow>\n                         <CCol className=\"md-12 xs-12\">\n                             <CFormGroup>\n                            <CLabel>Username <span className=\"text-danger\">*</span></CLabel>\n                             <CInput\n                             className=\"form-control\"\n                             placeholder=\"Enter Username\"\n                             name=\"username\"\n                             value= { this.state.username}\n                             onChange={(e) => this.handleChange({ username: e.target.value }) }\n                             />\n                             </CFormGroup>\n                         </CCol>\n                     </CRow>\n                     <CRow>\n                         <CCol className=\"md-12 xs-12\">\n                             <CFormGroup>\n                             <CLabel>Email</CLabel>\n                             <CInput\n                             className=\"form-control\"\n                             name=\"email\"\n                             placeholder=\"Enter Email\"\n                             value= { this.state.email}\n                             onChange={(e) => this.handleChange({ email: e.target.value }) }\n                             />\n                             </CFormGroup>\n                         </CCol>\n                     </CRow>\n                     <CRow>\n                         <CCol className=\"md-12 xs-12\">\n                             <CFormGroup>\n                             <CLabel>Password <span className=\"text-danger\">*</span></CLabel>\n                             <CInput\n                             className=\"form-control\"\n                             placeholder=\"Enter Password\"\n                             name=\"password\"\n                             value= { this.state.password}\n                             onChange={(e) => this.handleChange({ password: e.target.value }) }\n                             />\n                             </CFormGroup>\n                         </CCol>\n                     </CRow>\n                     {/* <CRow>\n                         <CCol className=\"md-12 xs-12\">\n                             <CFormGroup>\n                                 <CLabel>Role</CLabel>\n                                 <CSelect className=\"form-select\"\n                                 onChange={(e) => this.handleChange({ role: e.target.value }) }\n                                 name=\"role\">\n                                     <option>Select Option</option>\n                                     {this.state.rolesOption.map((option) => (\n                                        <option selected={this.state.roleSelected == option.id } key={option.id} value={option.id}>{option.name}</option>\n                                    ))}\n                                 </CSelect>\n                             </CFormGroup>\n                         </CCol>\n                     </CRow> */}\n                     <CRow>\n                         <CCol className=\"md-12 xs-12\">\n                             <CFormGroup>\n                             <CLabel>Description</CLabel>\n                                 <CTextarea placeholder=\"Enter Description\"\n                                  name=\"description\"\n                                  value= { this.state.description}\n                                  onChange={(e) => this.handleChange({ description: e.target.value }) }\n                                  />\n                             </CFormGroup>\n                         </CCol>\n                     </CRow>\n                     <CRow>\n                         <CCol className=\"md-12 xs-12\">\n                             <CFormGroup>\n                                <CButton to=\"/user\" className=\"float-right\">Cancel</CButton>\n                                <CButton type=\"submit\" onClick= { this.submitHandler } className=\"float-right\">Save Change</CButton>\n                             </CFormGroup>\n                         </CCol>\n                     </CRow>\n                     </CForm>\n                </CCardBody>\n            </CCard>\n        );\n    }\n}\n\nexport default UpdateUser;"],"sourceRoot":""}