{"version":3,"sources":["Service.js","screens/authentication/login/Login.js"],"names":["serviceAPI","backgroundImage","width","height","Login","props","handleChange","changeObject","setState","hideAlert","show","formReset","document","getElementById","reset","handleSubmitLogin","e","preventDefault","email","state","password","axios","post","ServiceApi","then","respone","users","data","message","localStorage","setItem","setTimeout","window","location","href","origin","style","className","md","id","onSubmit","this","name","type","placeholder","autoComplete","onChange","target","value","xs","color","onClick","warning","showCancel","confirmBtnText","confirmBtnBsStyle","cancelBtnBsStyle","title","onConfirm","onCancel","React","Component"],"mappings":"4KAEeA,IAFC,uB,uKCqBVC,EAAkB,CACtBC,MAAO,OACPC,OAAQ,QACRF,gBAAiB,gCAGbG,E,kDAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAURC,aAAgB,SAACC,GACf,EAAKC,SAASD,IAZE,EAelBE,UAAY,WACV,EAAKD,SAAS,CAAEE,MAAM,KAhBN,EAmBlBC,UAAY,WACVC,SAASC,eAAe,YAAYC,SApBpB,EAuBlBC,kBAAoB,SAACC,GACnBA,EAAEC,iBAGF,IAAIC,EAAQ,EAAKC,MAAMD,MACnBE,EAAW,EAAKD,MAAMC,SAG1BC,IAAMC,KAAN,UAAcC,IAAd,iBAAyC,CACvCL,MAAOA,EACPE,SAAUA,IACTI,MAAM,SAAAC,GAEP,EAAKjB,SAAS,CAAEkB,MAAOD,EAAQE,KAAKA,OACR,IAAxBF,EAAQE,KAAKC,SAEfC,aAAaC,QAAQ,OAAQ,EAAKX,MAAMO,OAGxC,EAAKlB,SAAS,CACZE,MAAM,EACNkB,QAAS,wBAEXG,YAAW,WACTC,OAAOC,SAASC,KAAhB,UAA0BF,OAAOG,OAAjC,aACC,MAEH,EAAK3B,SAAS,CACZE,MAAM,EACNkB,QAAS,8CAlDf,EAAKT,MAAQ,CACXD,MAAO,GACPE,SAAU,GACVM,MAAO,GACPhB,MAAM,EACNkB,QAAS,IAPK,E,qDA0DT,IAAD,OACN,OACE,qBAAKQ,MAAQnC,EAAkBoC,UAAU,qDAAzC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAMA,UAAU,yBAAhB,SACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOD,UAAU,MAAjB,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOE,GAAG,WAAWC,SAAUC,KAAK1B,kBAApC,UACE,uCACA,mBAAGsB,UAAU,aAAb,qCACA,eAAC,IAAD,CAAaA,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOK,KAAK,iBAGhB,cAAC,IAAD,CAAQC,KAAK,OACbD,KAAK,QACLE,YAAY,cACZC,aAAa,QACbC,SAAU,SAAC9B,GAAD,OAAO,EAAKV,aAAa,CAAEY,MAAOF,EAAE+B,OAAOC,cAGvD,eAAC,IAAD,CAAaX,UAAU,OAAvB,UACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOK,KAAK,wBAGhB,cAAC,IAAD,CAAQC,KAAK,WACbD,KAAK,WACLE,YAAY,iBACZC,aAAa,mBACbC,SAAU,SAAC9B,GAAD,OAAO,EAAKV,aAAa,CAAEc,SAAUJ,EAAE+B,OAAOC,cAG1D,eAAC,IAAD,WACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,cAAC,IAAD,CAASN,KAAK,SAASO,MAAM,YAAYb,UAAU,OAAnD,qBAEF,cAAC,IAAD,CAAMY,GAAG,IAAIZ,UAAU,aAAvB,SACA,cAAC,IAAD,CAASa,MAAM,SAASC,QAAS,kBAAM,EAAKxC,aAAc0B,UAAU,OAApE,qCAUd,cAAC,IAAD,CACU3B,KAAM+B,KAAKtB,MAAMT,KACjB0C,SAAO,EACPC,YAAU,EACVC,eAAe,OACfC,kBAAkB,SAClBC,iBAAiB,UACjBC,MAAOhB,KAAKtB,MAAMS,QAClB8B,UAAWjB,KAAKhC,UACjBkD,SAAUlB,KAAKhC,qB,GA1HdmD,IAAMC,WAiIXzD","file":"static/js/8.ce20d6d3.chunk.js","sourcesContent":["const serviceAPI = `http://localhost:81`;\n\nexport default serviceAPI","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport SweetAlert from 'react-bootstrap-sweetalert';\nimport ServiceApi from \"../../../Service\";\nimport CIcon from '@coreui/icons-react';\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText,\n  CRow\n} from '@coreui/react';\n\nconst backgroundImage = {\n  width: \"100%\",\n  height: \"400px\",\n  backgroundImage: \"url(/avatars/background.jpg)\"\n}\n\nclass Login extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      users: [],\n      show: false,\n      message: ''\n    }\n  }\n\n  handleChange  = (changeObject) => {\n    this.setState(changeObject);\n  }\n\n  hideAlert = () => {\n    this.setState({ show: false });\n  }\n\n  formReset = () => {\n    document.getElementById(\"userForm\").reset();\n  }\n\n  handleSubmitLogin = (e) => {\n    e.preventDefault();\n\n    // check login \n    let email = this.state.email;\n    let password = this.state.password;\n\n    // Get User Data\n    axios.post(`${ServiceApi}/api/v1/login`, {\n      email: email,\n      password: password\n    }).then( respone => {\n\n      this.setState({ users: respone.data.data });\n      if(!respone.data.message == 0){\n        // Store User seesion ID\n        localStorage.setItem('uuid', this.state.users);\n\n        // Set TimeOut alert\n        this.setState({ \n          show: true,\n          message: 'Login Successfully.'\n        });\n        setTimeout(function(){\n          window.location.href = `${window.origin}/#/home`;\n        }, 2000);\n      }else{\n        this.setState({ \n          show: true,\n          message: 'Your email and password is incorrect!'\n        });\n      }\n    })\n  }\n\n  render(){\n    return (\n      <div style={ backgroundImage } className=\"c-app c-default-layout flex-row align-items-center\">\n        <CContainer>\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"6\">\n              <CCardGroup>\n                <CCard className=\"p-4\">\n                  <CCardBody>\n                    <CForm id=\"userForm\" onSubmit={this.handleSubmitLogin}>\n                      <h1>Login</h1>\n                      <p className=\"text-muted\">Sign In to your account</p>\n                      <CInputGroup className=\"mb-3\">\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-user\" />\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput type=\"text\" \n                        name=\"email\" \n                        placeholder=\"Enter Email\" \n                        autoComplete=\"email\"\n                        onChange={(e) => this.handleChange({ email: e.target.value }) }\n                        />\n                      </CInputGroup>\n                      <CInputGroup className=\"mb-4\">\n                        <CInputGroupPrepend>\n                          <CInputGroupText>\n                            <CIcon name=\"cil-lock-locked\" />\n                          </CInputGroupText>\n                        </CInputGroupPrepend>\n                        <CInput type=\"password\" \n                        name=\"password\"\n                        placeholder=\"Enter Password\" \n                        autoComplete=\"current-password\"\n                        onChange={(e) => this.handleChange({ password: e.target.value }) }\n                        />\n                      </CInputGroup>\n                      <CRow>\n                        <CCol xs=\"6\">\n                          <CButton type=\"submit\" color=\"secondary\" className=\"px-4\">Login</CButton>\n                        </CCol>\n                        <CCol xs=\"6\" className=\"text-right\">\n                        <CButton color=\"danger\" onClick={() => this.formReset() } className=\"px-4\">Reset</CButton>\n                        </CCol>\n                      </CRow>\n                    </CForm>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n          {/* Sweet Alert */}\n          <SweetAlert\n                    show={this.state.show}\n                    warning\n                    showCancel\n                    confirmBtnText=\"Okay\"\n                    confirmBtnBsStyle=\"danger\"\n                    cancelBtnBsStyle=\"default\"\n                    title={this.state.message}\n                    onConfirm={this.hideAlert}\n\t                  onCancel={this.hideAlert}\n                />\n        </CContainer>\n      </div>\n    )\n  }\n}\nexport default Login;"],"sourceRoot":""}